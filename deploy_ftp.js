import ftp from 'basic-ftp';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
dotenv.config();

// –°–æ–∑–¥–∞–µ–º –∫–µ—à —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const CACHE_FILE = '.deploy-cache.json';

function getFileHash(filePath) {
    const fileBuffer = fs.readFileSync(filePath);
    const hashSum = crypto.createHash('md5');
    hashSum.update(fileBuffer);
    return hashSum.digest('hex');
}

function loadCache() {
    try {
        if (fs.existsSync(CACHE_FILE)) {
            return JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Could not load cache file, will rebuild all files');
    }
    return {};
}

function saveCache(cache) {
    fs.writeFileSync(CACHE_FILE, JSON.stringify(cache, null, 2));
}

function isFileChanged(filePath, cache) {
    if (!fs.existsSync(filePath)) return false;
    
    const currentHash = getFileHash(filePath);
    const cachedHash = cache[filePath];
    
    return currentHash !== cachedHash;
}

async function copyFilesToDist() {
    console.log('üì¶ Checking for file changes and copying to dist directory...');
    
    const distDir = './dist';
    const cache = loadCache();
    const newCache = {};
    let copiedCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(distDir)) {
        fs.mkdirSync(distDir, { recursive: true });
    }
    
    // –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const mainFiles = [
        'index.html',
        'styles.css', 
        'script.js',
        'send-email.php'
    ];
    
    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    for (const file of mainFiles) {
        if (fs.existsSync(file)) {
            const currentHash = getFileHash(file);
            newCache[file] = currentHash;
            
            if (isFileChanged(file, cache)) {
                fs.copyFileSync(file, path.join(distDir, file));
                console.log(`‚úÖ Copied ${file} (changed)`);
                copiedCount++;
            } else {
                console.log(`‚è≠Ô∏è Skipped ${file} (unchanged)`);
            }
        }
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ (fonts, images, icons) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const directories = ['fonts', 'images', 'icons'];
    
    for (const dir of directories) {
        if (fs.existsSync(dir)) {
            const copied = copyDirRecursiveWithCache(dir, path.join(distDir, dir), cache, newCache);
            if (copied > 0) {
                console.log(`‚úÖ Copied directory ${dir} (${copied} files changed)`);
                copiedCount += copied;
            } else {
                console.log(`‚è≠Ô∏è Skipped directory ${dir} (unchanged)`);
            }
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à
    saveCache(newCache);
    
    if (copiedCount > 0) {
        console.log(`‚úÖ ${copiedCount} files copied to dist successfully!`);
    } else {
        console.log('‚ÑπÔ∏è No files changed, dist is up to date');
    }
    
    return copiedCount;
}

function copyDirRecursiveWithCache(src, dest, cache, newCache) {
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }
    
    const entries = fs.readdirSync(src, { withFileTypes: true });
    let copiedCount = 0;
    
    for (const entry of entries) {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        const relativePath = path.relative('.', srcPath);
        
        if (entry.isDirectory()) {
            copiedCount += copyDirRecursiveWithCache(srcPath, destPath, cache, newCache);
        } else {
            const currentHash = getFileHash(srcPath);
            newCache[relativePath] = currentHash;
            
            if (isFileChanged(relativePath, cache)) {
                fs.copyFileSync(srcPath, destPath);
                copiedCount++;
            }
        }
    }
    
    return copiedCount;
}

function copyDirRecursive(src, dest) {
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }
    
    const entries = fs.readdirSync(src, { withFileTypes: true });
    
    for (const entry of entries) {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        
        if (entry.isDirectory()) {
            copyDirRecursive(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);
        }
    }
}

async function deployToFTP() {
    const client = new ftp.Client();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    client.ftp.verbose = true;
    
    try {
        console.log('üöÄ Starting FTP deployment...');
        
        // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ dist
        const changedFiles = await copyFilesToDist();
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π
        if (changedFiles === 0) {
            console.log('‚ÑπÔ∏è No changes detected, skipping FTP upload');
            return;
        }
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É
        await client.access({
            host: process.env.FTP_HOST,
            port: parseInt(process.env.FTP_PORT) || 21,
            user: process.env.FTP_USER,
            password: process.env.FTP_PASSWORD,
            secure: process.env.FTP_SECURE === 'true'
        });
        
        console.log('‚úÖ Connected to FTP server:', process.env.FTP_HOST);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const localPath = process.env.FTP_LOCAL_PATH || './dist';
        const remotePath = process.env.FTP_REMOTE_PATH || '/public_html/';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
        if (!fs.existsSync(localPath)) {
            throw new Error(`Local directory ${localPath} does not exist. Did you run build command?`);
        }
        
        console.log(`üìÅ Uploading from: ${localPath}`);
        console.log(`üìÅ Uploading to: ${remotePath}`);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        await client.ensureDir(remotePath);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
        await client.uploadFromDir(localPath, remotePath);
        
        console.log('üéâ Deployment completed successfully!');
        console.log(`üåê Your site should be available at: ${process.env.SITE_URL || 'your-website.com'}`);
        
    } catch (error) {
        console.error('‚ùå Deployment failed:', error.message);
        process.exit(1);
    } finally {
        client.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
deployToFTP();